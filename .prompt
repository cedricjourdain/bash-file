#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;

prompt_git() {
    local s='';
    local branchName='';
    local tagName='';
    local timeout_cmd=''
    command -v timeout3 >/dev/null 2>&1 && { timeout_cmd="timeout3 -m -t 2 -i 1 -d 0 "; }
    # Check if the current directory is in a Git repository.
    if [ $(${timeout_cmd}git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            #git update-index --really-refresh -q &>/dev/null;
            git update-index --refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;
            # TODO: use ORG_HEAD instad of fetching remote
            # Check for unpushed commits
            local remote="$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null)"
            local origin_infos="";
            if [ -n "${remote}" -a "${remote}" != '@{u}' ]; then
                commit_ahead_nb="$(git rev-list --count $remote..HEAD)"
                if [ $commit_ahead_nb != "0" ]; then
                    origin_infos+="↑$commit_ahead_nb";
                fi;
                commit_after_nb="$(git rev-list --count HEAD..$remote)"
                if [ $commit_after_nb != "0" ]; then
                    origin_infos+="↓$commit_after_nb";
                fi;
            else
                origin_infos+="u"
            fi;
            [ -n "${origin_infos}" ] && [ -n "${s}" ] && s+=" ";
            s+="${origin_infos}"
        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        tagName="$(git describe --tags --exact-match HEAD 2> /dev/null || \
            echo '')";

        [ -n "${s}" ] && s=" [${s}]";
        [ -n "${tagName}" ] && tagName=" (${tagName})";
        echo -e "${1}${branchName}${tagName}${blue}${s}";
    else
        return;
    fi;
}

prompt_virtualenv() {
    local s=''
    [ -n "${VIRTUAL_ENV}" ] && s=" (`basename \"$VIRTUAL_ENV\"`)";
    echo -e "${s}";
}

if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

prompt(){
    local EXIT=$?
    if [ $EXIT != 0 ]; then
        last_cmd_status="\[${red}\]✘"
    else
        last_cmd_status="\[${green}\]✔"
    fi

    PS1="\[\033]0;\u@\H: \w\007\]"; # window title
    PS1+="\[${bold}\]\n"; # newline
    PS1+="$last_cmd_status "; # las command status
    PS1+="\[${violet}\][\A] "; # time

    if [ $PROMPT = 0 ]; then
        PS1+="\[${userStyle}\]\u"; # username
        PS1+="\[${white}\] at ";
        PS1+="\[${hostStyle}\]\H"; # host
        PS1+="\[${white}\] in ";
        PS1+="\[${green}\]\w"; # working directory
        PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\")"; # Git repository details
        PS1+="\[${white}\]\$(prompt_virtualenv)"; # Git repository details
        PS1+="\n";
    fi
    PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)

    export PS1;
}

export PROMPT=0
alias +='export PROMPT=0'
alias _='export PROMPT=1;c'
export PROMPT_COMMAND=prompt
PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
